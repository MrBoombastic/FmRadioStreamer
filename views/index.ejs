<script src="./public/jquery.min.js"></script>
<link rel="stylesheet" href="./public/bootstrap.min.css">
<script src="./public/bootstrap.min.js"></script>
<link href="./public/select2.min.css" rel="stylesheet"/>
<script src="./public/select2.min.js"></script>
<script>
    let logs;
    errorHandler = async (data, endpoint, errored = false) => {
        const status = data.status
        if (!errored) data = await data.json().catch(() => data);
        logs.innerText += (endpoint + "  " + status + "  " + JSON.stringify(data) + "\n");
        logs.scrollTop = logs.scrollHeight - logs.clientHeight;
        return data
    }
    niceFetch = (value, method = "GET", body, headers) => {
        return fetch(value, {method, body, headers})
            .then(async r => await errorHandler(r, value))
            .catch(async e => await errorHandler(e, value, true))
    }
    save = () => {
        const config = {}
        for (let data of saveinputs) {
            data.id = data.id.replace("config-", "")
            let newVal;
            if (data.attributes.type.value === "number") newVal = Number(data.value);
            else if (data.attributes.type.value === "boolean") newVal = JSON.parse(data.value.toLowerCase());
            else if (data.attributes.type.value === "string") newVal = data.value;
            config[data.id] = newVal
        }
        niceFetch("/save", "POST", JSON.stringify(config, null, 3), {'Content-Type': 'application/json'})
    }
</script>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="FmRadioStream Web Dashboard">
    <meta name="author" content="MrBoombastic">
    <title>FmRadioStreamer</title>
</head>

<body class="bg-dark">

<nav class="navbar navbar-expand-lg navbar-dark bg-secondary static-top">
    <div class="container">
        <a class="navbar-brand" href="/">FmRadioStreamer</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive"
                aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="https://github.com/MrBoombastic/FmRadioStreamer"
                       target="_blank">GitHub</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container">
    <div class="row" style="padding-top: 2rem">
        <div class="col-md-3 col-sm-12" style="padding-bottom: 1rem">
            <div class="card bg-dark">
                <div class="card-body">
                    <button type="button" class="btn btn-danger" onclick="niceFetch('./mng?action=superstop')"
                            style="width: 100%">Radio DOWN (a.k.a. Super Stop)
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-9 col-sm-12" style="padding-bottom: 1rem">
            <div class="card bg-dark">
                <div class="card-body">
                    <p class="card-text text-white">Pick your song and play!</p>
                    <select name="songpicker" class="songpicker" style="width: 100%">
                        <% list.forEach(el => {
                            el = el.slice(0, -4); %>
                        <option value="<%= el; %>"><%= el; %></option>
                        <% }); %>
                    </select>
                </div>
                <button type="button" class="btn btn-success"
                        onclick="niceFetch('./mng?action=play&song=' + $('.songpicker').select2('data')[0].text)">Play
                </button>
                <button type="button" class="btn btn-warning" onclick="niceFetch('./mng?action=loudstop')">Stop</button>
            </div>
        </div>
        <p class="text-white">YouTube:</p>
        <div class="card col-md-12 bg-dark" style="margin-bottom: 1rem">
            <div class="row no-gutters">
                <div class="col-md-6 col-sm-12">
                    <div class="card bg-dark" style="height: 100%; border: none">
                        <div class="card-body">
                            <p class="card-text text-white">Search and download</p>
                            <div class="input-group">
                                <input type="text" class="form-control" id="youtube-input">
                                <div class="input-group-append">
                                    <button id="youtube-search" type="button" class="btn btn-primary">Search</button>
                                    <button id="youtube-download" type="button" class="btn btn-success"
                                            onclick="niceFetch(`./mng?action=yt&song=${encodeURIComponent(document.getElementById('youtube-input').value)}`)">
                                        Download
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="row no-gutters">
                        <div class="col-md-4">
                            <a href id="youtube-url" target="_blank">
                                <img src="" class="card-img" alt="Preview Image" id="youtube-thumb">
                            </a>
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-title text-white" id="youtube-title">Title</h5>
                                <p class="card-text text-white" id="youtube-description">Description</p>
                                <p class="card-text"><small class="text-muted" id="youtube-channelTitle">Channel</small>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12" style="padding-bottom: 1rem">
            <div class="card bg-dark">
                <div class="card-body">
                    <div class="card-title text-white">Configuration:</div>
                    <div class="card-description text-white">Note: some settings will be applied when next song will be played,
                        after Super Stop or even after application reboot!
                    </div>
                    <br>
                    <div class="row">
                        <% for(const prop in config) { %>
                            <div class="col-md-6">
                                <label for="config-<%= prop %>" class="text-white"><%= prop %>:</label>
                                <input type="<%= typeof config[prop] %>" class="form-control" id="config-<%= prop %>"
                                       value="<%= config[prop] %>">
                            </div>
                        <% } %>
                    </div>
                </div>
                <button type="button" class="btn btn-success" onclick="save()"
                        style="width: 100%">Save
                </button>
            </div>
        </div>
        <div class="col-12" style="padding-bottom: 1rem">
            <div class="card bg-dark">
                <div class="card-body">
                    <div class="card-title text-white">API requests and responses:</div>
                    <pre style="max-height: 15rem" id="logs" class="text-white"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

</body>
<script>
    $(document).ready(function () {
        logs = document.getElementById("logs");
        $('.songpicker').select2();
        document.getElementById("youtube-search").onclick = async function () {
            const data = await niceFetch(`./mng?action=yt&song=${encodeURIComponent(document.getElementById("youtube-input").value)}&searchOnly=true`);
            if (data.error) return;
            ["title", "channelTitle", "description"].forEach(prop => {
                document.getElementById("youtube-" + prop).textContent = decodeURIComponent(data[prop]);
            });
            document.getElementById("youtube-thumb").src = data.thumbnails.high.url;
            document.getElementById("youtube-url").href = data.url;
        };
    });
    const saveinputs = $('input[id^="config"]')
</script>
</html>
